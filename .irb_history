Time.now
Time.current
exit
Time.current
exit
Hirb::View.enabled?
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
exit 
user = User.new
user.errors.full_messages
user.save
user.errors.full_messages
user.errors.full_messages
user.errors.full_messages
exit
user = User.new
user.save
user.errors.full_messages
exit
User.create(email: "a@a.a")
exit
domain = @example.com
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "test@example@com"
user.email = email
user.save
user.errors.full_messages
email = "active@example.com"
User.create(name: "active", email: email, password: "password", activated: true)
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "TEST@test.COM"
user = User.new(name: "test", email: email, password: "password")
user.save
user.email
exit
User.all
exit
payload = { sub: 1 }
Hirb.disable
payload
secret_key = Rails.application.credentials.secret_key_base
tocken = JWT.encode(payload, secret_key)
token
token = JWT.encode(payload, secret_key)
token = JWT.encode(payload, secret_key)
token
JWT.decode(token, secret_key)
exit
Hirb.disable
payload
payload = { sub: 1 }
secret_key = Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
exit
UserAuth.toke.issuer
UserAuth.token.issuer
UserAuth.token_issuer
UserAuth.token_audience
exit
User.first
exit
reload!
user = User.first
user.remember("a")
user
user.forget
user
token1 = UserAuth::RefreshToken.new(user_id: user.id)
token1
token1.payload[:jti]
user.reload
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token).entity_for_user
exit
